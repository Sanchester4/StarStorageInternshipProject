package InternshipMainInterface;

import java.sql.SQLException;
import java.util.Scanner;
import java.util.function.Predicate;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;

import InternshipDatabase.DatabaseInterface;
import InternshipDatabase.DbFunctions;
import InternshipUtils.RegexClass;
import InternshipDatabase.DbUtils;

public class MainClass {

	public static void main(String args[]) throws SQLException {
		DatabaseInterface demo = new DbFunctions();
		DbUtils jparser = new DbUtils();
		jparser.setUrlFile("C:\\Users\\Marck\\Desktop\\outpu1.json");
		if (jparser.getUrlFile() != null) {
			demo.createDb();
			jparser.getDataJson();
		}
		loopInput();
	}

	public static void loopInput() {
		DatabaseInterface demo = new DbFunctions();
		RegexClass regex = new RegexClass();
		String result = null;
		System.out.println("Press 'HELP' to find out the information about methods"+"\nPress 'EXIT' to release the database out from program");
		try {
			try (Scanner scanner = new Scanner(System.in)) {
				while (scanner.hasNextLine()) {
					String[] tokens = scanner.nextLine().split("\\s");
					result = StringUtils.join(tokens, " ");
					Pattern p = Pattern.compile("EXPORT", Pattern.CASE_INSENSITIVE);
					Predicate<String> predicate = p.asPredicate();
					if (predicate.test(result) == true) {
						String urls = result.substring(7);
						DbUtils jparser1 = new DbUtils();
						jparser1.writeDataJson(urls);
						System.out.println("The export file was writted!");
						continue;
					}
					if (result.toLowerCase().equals("exit")) {
						demo.freeDb();
						System.out.println("You have exited from program!");
						System.exit(0);
					} else if (result.toLowerCase().equals("help")) {
						MainClass obj = new MainClass();
						obj.helpInfo();
					} else {
						regex.match(result);
					}
				}
				scanner.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void helpInfo() {
		System.out.print("PRINT PRODUCTS CATEGORY ${CATEGORY_NAME} - print all products of a specific category."
				+ "\nPRINT PRODUCTS ALL - print all products with a row number generated by a loop."
				+ "\nPRINT PRODUCTS ${PRODUCTS_NAME} - print product with specific name."
				+ "\nPRINT CATEGORIES - print all categories."
				+ "\nBUY ${PRODUCT} ${QUANTITY} FOR ${USERNAME} - buy a product for a specific user."
				+ "\nREPLENISH ${PRODUCT} ${QUANTITY} - update the quantity , but cannot excces the maxQuantity."
				+ "\nADD NEW CATEGORY ${NAME} - add a  new category , getting error message if name of category is already used in the table."
				+ "\nADD NEW PRODUCT ${NAME} ${CATEGORY} ${QUANTITY} ${PRICE} - add new product if a category already exist or recently added, getting error message if inputed category doesn't exist."
				+ "\nREMOVE PRODUCT ${NAME} - remove a product if his quantity is zero."
				+ "\nPRINT DISPLAY_MODE - print the actual PrintStream, the console or the FILE_PATH."
				+ "\nSWITCH DISPLAY_MODE CONSOLE or FILE ${FILE_PATH} - called with parameter of FILE_PATH , we are create or rewriting the JSON FILE with logs."
				+ "\nEXPORT ${FILE_NAME} - exporting the actual mysql tables with data of database, we also can initialise our program with this file.");

	}
}
